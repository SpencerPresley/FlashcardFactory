Define the responsibility of the SaleOrder class in the initial design, It calculates price, tax, total price, and displays a receipt; What attributes are included in the initial SaleOrder class, customName, itemSold, itemQuantity, unitPrice; What is the initial tax calculation method in the first SaleOrder design, itemQuantity * unitPrice * 0.05; What problem arises in Stage Two of the Dogwood company example, Changing tax requirements for different states (Delaware and Maryland); How is the changing tax requirement addressed in the new SaleOrder design, By introducing a SaleTax interface and separate classes for different tax rules; What design pattern is being demonstrated with the SaleTax interface and its implementations, Strategy Pattern; What is the benefit of using the Strategy Pattern for tax calculation, It allows for flexible and interchangeable tax calculation methods without modifying the SaleOrder class; In the Course class example, what is the initial sorting method used, Selection Sort; How is the sorting strategy made flexible in the new Course class design, By introducing a SortStrategy interface and allowing different sorting implementations; What design pattern is used to implement different sorting strategies in the Course class, Strategy Pattern; What are the two components of ticket sale price in the Perdue Stadium example, Ticket price and sale tax; What are the two varying factors for ticket price, Children and Adult pricing; What two interfaces are used in the long-term TicketSale design, PriceStrategy and TaxStrategy; What is the purpose of the PriceStrategy interface, To provide different pricing strategies (Senior, Children, Adult); What is the purpose of the TaxStrategy interface, To provide different tax calculation strategies (US, Canada, Germany); What method is used in the TicketSale class to calculate the total amount, getAmount(); How does the getAmount() method in TicketSale calculate the total price, It combines the results of priceStrategy.getAmt() and taxStrategy.getAmt(); What is the advantage of separating PriceStrategy and TaxStrategy, It allows for independent changes and extensions to pricing and tax calculations; What is the main design principle demonstrated in both examples, Separate changing parts (like tax and sorting) from the core logic; What is the name of the design pattern that allows an object to alter its behavior when its internal state changes, Strategy Pattern;